# FROM must be called before other ARGS except for ARG BASE_IMAGE
ARG BASE_IMAGE
FROM ${BASE_IMAGE}

# For the rest of this Dockerfile
SHELL ["/bin/bash", "-c"]

# Required build args, should be specified in docker_build.sh
ARG CMAKE_VERSION
ARG PYTHON_VERSION
ARG DEVELOPER_BUILD
RUN if [ -z "${CMAKE_VERSION}"   ]; then echo "Error: ARG CMAKE_VERSION   not specified."; exit 1; fi \
 && if [ -z "${PYTHON_VERSION}"  ]; then echo "Error: ARG PYTHON_VERSION  not specified."; exit 1; fi \
 && if [ -z "${DEVELOPER_BUILD}" ]; then echo "Error: ARG DEVELOPER_BUILD not specified."; exit 1; fi

# Prevent interactive inputs when installing packages
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=America/Los_Angeles
ENV SUDO=command
# --- 1. INSTALL BASIC DEPENDENCIES AND BUILD DEPS FOR PYENV ---
# Install not only basic dependencies, but also those necessary
# for pyenv to build Python from source. This also includes the fix
# for the curl (77) error by installing ca-certificates.
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Runtime and download dependencies
    wget curl \
    libgl1 \
    libgomp1 \
    ca-certificates \
    # General build dependencies
    build-essential \
    git \
    # Build dependencies for Python (required by pyenv)
    libssl-dev zlib1g-dev libbz2-dev \
    libreadline-dev libsqlite3-dev llvm \
    libncurses5-dev libncursesw5-dev \
    xz-utils tk-dev libffi-dev liblzma-dev \
 && update-ca-certificates \
 && rm -rf /var/lib/apt/lists/*

# --- 2. PYTHON INSTALLATION WITH PYENV (REPLACES MINICONDA) ---
ENV PYENV_ROOT=/root/.pyenv
ENV PATH="$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH"
RUN curl https://pyenv.run | bash \
 && pyenv update \
 && pyenv install $PYTHON_VERSION \
 && pyenv global $PYTHON_VERSION \
 && pyenv rehash \
 # Upgrade pip
 && pip install --upgrade pip setuptools wheel

# Verify that the correct Python version is active
RUN which python \
 && python --version \
 && pip --version

# --- 3. CMAKE INSTALLATION ---
RUN CMAKE_VER_NUMBERS=$(echo "${CMAKE_VERSION}" | cut -d"-" -f2) \
 && wget -q https://github.com/Kitware/CMake/releases/download/v${CMAKE_VER_NUMBERS}/${CMAKE_VERSION}.tar.gz \
 && tar -xf ${CMAKE_VERSION}.tar.gz \
 && cp -ar ${CMAKE_VERSION} ${HOME} \
 && rm ${CMAKE_VERSION}.tar.gz
ENV PATH=${HOME}/${CMAKE_VERSION}/bin:${PATH}

# --- 4. INSTALL OPEN3D DEPENDENCIES AND COMPILER ---
COPY ./util/install_deps_ubuntu.sh /root/Open3D/util/
RUN /root/Open3D/util/install_deps_ubuntu.sh assume-yes \
 && rm -rf /var/lib/apt/lists/*

# --- 5. INSTALL PYTHON DEPENDENCIES (PIP) ---
COPY ./python/requirements*.txt /root/Open3D/python/
RUN pip install -U -r /root/Open3D/python/requirements.txt \
  -r /root/Open3D/python/requirements_build.txt \
  -r /root/Open3D/python/requirements_test.txt

# --- 6. COPY AND BUILD OPEN3D ---
COPY . /root/Open3D
WORKDIR /root/Open3D

# Build
RUN mkdir build \
 && cd build \
 && cmake \
    -DBUILD_UNIT_TESTS=ON \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=~/open3d_install \
    -DDEVELOPER_BUILD=${DEVELOPER_BUILD} \
    .. \
 && make -j$(nproc) \
 && make install-pip-package -j$(nproc) \
 && make install -j$(nproc) \
 && pyenv rehash
RUN cp build/lib/python_package/pip_package/*.whl /
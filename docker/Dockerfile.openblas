# ARG BASE_IMAGE must be specified before any other ARGs
ARG BASE_IMAGE
FROM ${BASE_IMAGE}

# Use bash as the default shell for subsequent RUN commands
SHELL ["/bin/bash", "-c"]

# Required build args, should be specified in docker_build.sh
ARG CMAKE_VERSION
ARG PYTHON_VERSION
ARG DEVELOPER_BUILD
RUN if [ -z "${CMAKE_VERSION}"   ]; then echo "Error: ARG CMAKE_VERSION   not specified."; exit 1; fi \
 && if [ -z "${PYTHON_VERSION}"  ]; then echo "Error: ARG PYTHON_VERSION  not specified."; exit 1; fi \
 && if [ -z "${DEVELOPER_BUILD}" ]; then echo "Error: ARG DEVELOPER_BUILD not specified."; exit 1; fi

# Prevent interactive inputs when installing packages
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=America/Los_Angeles
ENV SUDO=command

# Minimal dependencies for running Docker
RUN apt-get update && apt-get install -y \
    wget \
    libgl1 \
    libgomp1 \
 && rm -rf /var/lib/apt/lists/*

# Minimal dependencies for building
RUN apt-get update && apt-get install -y \
    build-essential \
    git \
 && rm -rf /var/lib/apt/lists/*

# Additional dependencies for pyenv and building Python
RUN apt-get update && apt-get install -y \
    curl \
    libssl-dev \
    zlib1g-dev \
    libbz2-dev \
    libreadline-dev \
    libsqlite3-dev \
    llvm \
    libncurses5-dev \
    xz-utils \
    tk-dev \
    libxml2-dev \
    libxmlsec1-dev \
    libffi-dev \
    liblzma-dev \
 && rm -rf /var/lib/apt/lists/*

# Install pyenv
RUN curl https://pyenv.run | bash
# Update PATH to include pyenv binaries and shims
ENV PATH="/root/.pyenv/bin:/root/.pyenv/shims:$PATH"

# Install desired Python version via pyenv and set it as global
RUN pyenv install ${PYTHON_VERSION} \
 && pyenv global ${PYTHON_VERSION}
RUN which python \
 && python --version

# CMake installation: download, extract, and update PATH
RUN CMAKE_VER_NUMBERS=$(echo "${CMAKE_VERSION}" | cut -d"-" -f2) \
 && wget -q https://github.com/Kitware/CMake/releases/download/v${CMAKE_VER_NUMBERS}/${CMAKE_VERSION}.tar.gz \
 && tar -xf ${CMAKE_VERSION}.tar.gz \
 && cp -ar ${CMAKE_VERSION} ${HOME}
ENV PATH=${HOME}/${CMAKE_VERSION}/bin:${PATH}

# Install dependencies before copying the full Open3D directory for better Docker caching
COPY ./util/install_deps_ubuntu.sh /root/Open3D/util/
RUN /root/Open3D/util/install_deps_ubuntu.sh assume-yes \
 && rm -rf /var/lib/apt/lists/*
RUN echo ${PATH} \
 && echo "gcc=$(which gcc)" \
 && gcc --version \
 && echo "g++=$(which g++)" \
 && g++ --version

# Install Python dependencies via pip
COPY ./python/requirements*.txt /root/Open3D/python/
RUN which python \
 && python --version \
 && python -m pip install -U -r /root/Open3D/python/requirements.txt \
  -r /root/Open3D/python/requirements_build.txt \
  -r /root/Open3D/python/requirements_test.txt

# Copy the Open3D repository and set working directory
COPY . /root/Open3D
WORKDIR /root/Open3D

# Build Open3D: create build directory, run CMake configuration, build, and install
RUN mkdir build \
 && cd build \
 && cmake \
    -DBUILD_UNIT_TESTS=ON \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=~/open3d_install \
    -DDEVELOPER_BUILD=${DEVELOPER_BUILD} \
    .. \
 && make -j$(nproc) \
 && make install-pip-package -j$(nproc) \
 && make install -j$(nproc)
RUN cp build/lib/python_package/pip_package/*.whl /

# FROM must be called before other ARGS except for ARG BASE_IMAGE
ARG BASE_IMAGE=nvidia/cuda:12.1.0-cudnn8-devel-ubuntu22.04
FROM ${BASE_IMAGE}

# Customizable build arguments from cuda.yml
ARG DEVELOPER_BUILD
ARG CCACHE_TAR_NAME
# NOTE: CMAKE_VERSION should be the version number, e.g., "3.28.1"
ARG CMAKE_VERSION
ARG CCACHE_VERSION
ARG PYTHON_VERSION
ARG BUILD_TENSORFLOW_OPS
ARG BUILD_PYTORCH_OPS
ARG CI

# Forward all ARG to ENV
ENV DEVELOPER_BUILD=${DEVELOPER_BUILD}
ENV CCACHE_TAR_NAME=${CCACHE_TAR_NAME}
ENV CMAKE_VERSION=${CMAKE_VERSION}
ENV CCACHE_VERSION=${CCACHE_VERSION}
ENV PYTHON_VERSION=${PYTHON_VERSION}
ENV BUILD_PYTORCH_OPS=${BUILD_PYTORCH_OPS}
ENV BUILD_TENSORFLOW_OPS=${BUILD_TENSORFLOW_OPS}

# Prevent interactive inputs when installing packages
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=America/Los_Angeles
# This prevents "sudo: command not found" errors in scripts run as root
ENV SUDO=command

# Use bash as the default shell for complex commands
SHELL ["/bin/bash", "-c"]

# --- DYNAMIC ARCHITECTURE-AWARE INSTALLATIONS ---

# FIX 1: Install gnupg first, as it's required by apt-key.
RUN apt-get update && apt-get install -y --no-install-recommends gnupg && rm -rf /var/lib/apt/lists/*

# FIX 2: Re-add automatic architecture detection for NVIDIA keys.
RUN export APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn \
 && apt-key del 7fa2af80 \
 && case "$(uname -m)" in \
        "x86_64") NVIDIA_ARCH="x86_64";; \
        "aarch64") NVIDIA_ARCH="sbsa";; \
        *) echo "Unsupported architecture: $(uname -m)" && exit 1;; \
    esac \
 && apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu22.04/${NVIDIA_ARCH}/3bf863cc.pub \
 && apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/machine-learning/repos/ubuntu22.04/x86_64/7fa2af80.pub

# FIX 3: Add ca-certificates to fix potential curl/wget SSL errors.
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    wget \
    curl \
    ca-certificates \
    build-essential \
    libssl-dev zlib1g-dev libbz2-dev \
    libreadline-dev libsqlite3-dev llvm \
    libncurses5-dev libncursesw5-dev \
    xz-utils tk-dev libffi-dev liblzma-dev \
 && update-ca-certificates \
 && rm -rf /var/lib/apt/lists/*

# Dependencies: cmake, with automatic architecture detection
RUN case "$(uname -m)" in \
        "x86_64")  CMAKE_ARCH_SUFFIX="linux-x86_64";; \
        "aarch64") CMAKE_ARCH_SUFFIX="linux-aarch64";; \
        *) echo "Unsupported architecture for CMake: $(uname -m)" && exit 1;; \
    esac \
 && CMAKE_FILENAME="cmake-${CMAKE_VERSION}-${CMAKE_ARCH_SUFFIX}" \
 && CMAKE_FOLDER="cmake-${CMAKE_VERSION}-${CMAKE_ARCH_SUFFIX}" \
 && wget -q https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/${CMAKE_FILENAME}.tar.gz \
 && tar -xf ${CMAKE_FILENAME}.tar.gz \
 && cp -ar ${CMAKE_FOLDER} /root/cmake \
 && rm -f ${CMAKE_FILENAME}.tar.gz
ENV PATH=/root/cmake/bin:${PATH}

# Dependencies: ccache (build from source is cross-platform)
WORKDIR /root
RUN git clone https://github.com/ccache/ccache.git \
 && cd ccache \
 && git checkout v${CCACHE_VERSION} -b ${CCACHE_VERSION} \
 && mkdir build \
 && cd build \
 && cmake -DCMAKE_BUILD_TYPE=Release -DZSTD_FROM_INTERNET=ON .. \
 && make install -j$(nproc) \
 && ccache --version \
 && ccache -M 4G \
 && ccache -s

# Download ccache from GCS bucket (optional)
RUN CCACHE_DIR=$(ccache -p | grep cache_dir | grep -oE "[^ ]+$") \
 && CCACHE_DIR_PARENT=$(dirname ${CCACHE_DIR}) \
 && mkdir -p ${CCACHE_DIR_PARENT} \
 && cd ${CCACHE_DIR_PARENT} \
 && (wget -q https://storage.googleapis.com/open3d-ci-cache/${CCACHE_TAR_NAME}.tar.xz || wget -q https://storage.googleapis.com/open3d-ci-cache/${CCACHE_TAR_NAME}.tar.gz || true) \
 && if [ -f ${CCACHE_TAR_NAME}.tar.?z ]; then tar -xf ${CCACHE_TAR_NAME}.tar.?z; fi \
 && ccache -s

# --- PYTHON INSTALLATION WITH PYENV (REPLACES MINICONDA) ---
ENV PYENV_ROOT=/root/.pyenv
ENV PATH="$PYENV_ROOT/shims:$PYENV_ROOT/bin:$PATH"
RUN curl https://pyenv.run | bash \
 && pyenv update \
 && pyenv install $PYTHON_VERSION \
 && pyenv global $PYTHON_VERSION \
 && pyenv rehash \
 && pip install --upgrade pip setuptools wheel

# Verify Python installation
RUN which python \
 && python --version \
 && pip --version

# Checkout Open3D-ML main branch
ENV OPEN3D_ML_ROOT=/root/Open3D-ML
RUN git clone --depth 1 https://github.com/isl-org/Open3D-ML.git ${OPEN3D_ML_ROOT}

# Open3D C++ dependencies (The script is arch-aware)
COPY ./util/install_deps_ubuntu.sh /root/Open3D/util/
RUN /root/Open3D/util/install_deps_ubuntu.sh assume-yes \
 && rm -rf /var/lib/apt/lists/*

# Open3D Python dependencies
COPY ./util/ci_utils.sh /root/Open3D/util/
COPY ./python/requirements*.txt /root/Open3D/python/
RUN source /root/Open3D/util/ci_utils.sh \
 && install_python_dependencies with-jupyter

# Open3D Jupyter dependencies (NodeSource script is arch-aware)
RUN curl -fsSL https://deb.nodesource.com/setup_16.x | bash - \
 && apt-get install -y nodejs \
 && rm -rf /var/lib/apt/lists/* \
 && node --version \
 && npm install -g yarn \
 && yarn --version

# Open3D repo
COPY . /root/Open3D
WORKDIR /root/Open3D

# Build python wheel
RUN export NPROC=$(nproc) \
 && export BUILD_SHARED_LIBS=OFF \
 && source /root/Open3D/util/ci_utils.sh \
 && build_pip_package build_azure_kinect build_jupyter \
 && if [ ${CI:-}a != a ]; then cd /root/Open3D/build/ && ls | grep -Ev '^lib$' | xargs rm -rf ; fi \
 && pyenv rehash # FIX 4: Ensure command-line tools are available after install

# Compress ccache folder, move to / directory
RUN ccache -s \
 && CCACHE_DIR=$(ccache -p | grep cache_dir | grep -oE "[^ ]+$") \
 && CCACHE_DIR_NAME=$(basename ${CCACHE_DIR}) \
 && CCACHE_DIR_PARENT=$(dirname ${CCACHE_DIR}) \
 && cd ${CCACHE_DIR_PARENT} \
 && tar -caf /${CCACHE_TAR_NAME}.tar.xz ${CCACHE_DIR_NAME}

RUN echo "Docker build done."
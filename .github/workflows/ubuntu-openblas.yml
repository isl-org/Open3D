name: Ubuntu OpenBLAS
permissions: {}

on:
  workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    types: [opened, reopened, synchronize]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  GCE_GPU_CI_SA: ${{ secrets.GCE_GPU_CI_SA }}
  GCE_CLI_GHA_VERSION: '416.0.0'      # Fixed to avoid dependency on API changes

jobs:
  openblas-amd64:
    permissions:
      contents: read
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Maximize build space
        run: |
          source util/ci_utils.sh
          maximize_ubuntu_github_actions_build_space
      - name: Docker build
        run: docker/docker_build.sh openblas-amd64-py312-dev

      - name: Docker test
        run: docker/docker_test.sh openblas-amd64-py312-dev

  openblas-arm64:
    permissions:
      contents: read
    runs-on: ubuntu-24.04-arm
    strategy:
      fail-fast: false
      matrix:
        python_version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        is_main:
          - ${{ github.ref == 'refs/heads/main' }}
        exclude:
          - is_main: false
            python_version: '3.8'
          - is_main: false
            python_version: '3.9'
          - is_main: false
            python_version: '3.10'
          - is_main: false
            python_version: '3.11'
    env:
      DEVELOPER_BUILD: ${{ github.event.inputs.developer_build || 'ON' }}
      PYTHON_VERSION: ${{ matrix.python_version }}
      CCACHE_TAR_NAME: open3d-ubuntu-2004-cuda-ci-ccache
      OPEN3D_CPU_RENDERING: true
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Maximize build space
        run: |
          source util/ci_utils.sh
          maximize_ubuntu_github_actions_build_space
      # Be verbose and explicit here such that a developer can directly copy the
      # `docker/docker_build.sh xxx` command to execute locally.
      - name: Docker build
        run: |
          if [ "${{ env.PYTHON_VERSION }}" = "3.8" ] && [ "${{ env.DEVELOPER_BUILD }}" = "ON"  ]; then
            docker/docker_build.sh openblas-arm64-py38-dev
          elif [ "${{ env.PYTHON_VERSION }}" = "3.9" ] && [ "${{ env.DEVELOPER_BUILD }}" = "ON"  ]; then
            docker/docker_build.sh openblas-arm64-py39-dev
          elif [ "${{ env.PYTHON_VERSION }}" = "3.10" ] && [ "${{ env.DEVELOPER_BUILD }}" = "ON"  ]; then
            docker/docker_build.sh openblas-arm64-py310-dev
          elif [ "${{ env.PYTHON_VERSION }}" = "3.11" ] && [ "${{ env.DEVELOPER_BUILD }}" = "ON"  ]; then
            docker/docker_build.sh openblas-arm64-py311-dev
          elif [ "${{ env.PYTHON_VERSION }}" = "3.12" ] && [ "${{ env.DEVELOPER_BUILD }}" = "ON"  ]; then
            docker/docker_build.sh openblas-arm64-py312-dev
          elif [ "${{ env.PYTHON_VERSION }}" = "3.8" ] && [ "${{ env.DEVELOPER_BUILD }}" = "OFF" ]; then
            docker/docker_build.sh openblas-arm64-py38
          elif [ "${{ env.PYTHON_VERSION }}" = "3.9" ] && [ "${{ env.DEVELOPER_BUILD }}" = "OFF" ]; then
            docker/docker_build.sh openblas-arm64-py39
          elif [ "${{ env.PYTHON_VERSION }}" = "3.10" ] && [ "${{ env.DEVELOPER_BUILD }}" = "OFF" ]; then
            docker/docker_build.sh openblas-arm64-py310
          elif [ "${{ env.PYTHON_VERSION }}" = "3.11" ] && [ "${{ env.DEVELOPER_BUILD }}" = "OFF" ]; then
            docker/docker_build.sh openblas-arm64-py311
          elif [ "${{ env.PYTHON_VERSION }}" = "3.12" ] && [ "${{ env.DEVELOPER_BUILD }}" = "OFF" ]; then
            docker/docker_build.sh openblas-arm64-py312
          fi
          PIP_PKG_NAME="$(basename ${GITHUB_WORKSPACE}/open3d-[0-9]*.whl)"
          PIP_CPU_PKG_NAME="$(basename ${GITHUB_WORKSPACE}/open3d_cpu*.whl)"
          echo "PIP_PKG_NAME=$PIP_PKG_NAME" >> $GITHUB_ENV
          echo "PIP_CPU_PKG_NAME=$PIP_CPU_PKG_NAME" >> $GITHUB_ENV
      - name: Upload wheel to GitHub artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PIP_PKG_NAME }}
          path: |
            ${{ env.PIP_PKG_NAME }}
            ${{ env.PIP_CPU_PKG_NAME }}
          if-no-files-found: error

      - name: Docker test
        run: docker/docker_test.sh openblas-arm64-py312-dev
